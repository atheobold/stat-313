---
title: "Visualizing and Summarizing Numerical Data"
author: "Your group's names here!"
date: "The date goes here!"
format: 
  html:
    self-contained: true
editor: visual
execute: 
  echo: true
  warning: false
  message: false
---

## Getting started

### Load packages

Let's load the following packages:

-   The **tidyverse** "umbrella" package which houses a suite of many different
    `R` packages for data wrangling and data visualization
  * Note: This did not work last week, but should this week! 
  
-   The **openintro** `R` package: houses the dataset we will be working with

```{r packages}
# Package for functions 
library(tidyverse)

# Package for data
library(openintro)
```

### The data

The [Bureau of Transportation Statistics](http://www.rita.dot.gov/bts/about/)
(BTS) is a statistical agency that is a part of the Research and Innovative
Technology Administration (RITA). As its name implies, BTS collects and makes 
transportation data available, such as the flights data we will be working with
in this lab.

First, we'll view the `nycflights` data frame. Run the following code to load
in the data:

```{r data}
data(nycflights)
```

The **codebook** (description of the variables) can be accessed by pulling up
the help file by typing a `?` before the name of the dataset:

```{r help}
#| eval: false
?nycflights
```

One of the variables refers to the carrier (i.e. airline) of the flight, which
is coded according to the following system.

-   `carrier`: Two letter carrier abbreviation.

    -   `9E`: Endeavor Air Inc.
    -   `AA`: American Airlines Inc.
    -   `AS`: Alaska Airlines Inc.
    -   `B6`: JetBlue Airways
    -   `DL`: Delta Air Lines Inc.
    -   `EV`: ExpressJet Airlines Inc.
    -   `F9`: Frontier Airlines Inc.
    -   `FL`: AirTran Airways Corporation
    -   `HA`: Hawaiian Airlines Inc.
    -   `MQ`: Envoy Air
    -   `OO`: SkyWest Airlines Inc.
    -   `UA`: United Air Lines Inc.
    -   `US`: US Airways Inc.
    -   `VX`: Virgin America
    -   `WN`: Southwest Airlines Co.
    -   `YV`: Mesa Airlines Inc.

Remember that you can use `glimpse()` to take a quick peek at your data to
understand its contents better.

**Question 1** 

**(a) How large is the `nycflights` dataset? (i.e. How many rows and columns does it have?)**


**(b) Are there numerical variables in the dataset? If so, what are their names?**  


### Departure Delays

Let's start by examining the distribution of departure delays (`dep_delay`) of
all flights with a histogram.

**Question 2** -- Create a histogram of the `dep_delay` variable from the
`nycflights` data

```{r histogram}
# Your code for question 2 goes here! 

```

Histograms are generally a very good way to see the shape of a single
distribution of numerical data, but that shape can change depending on how the
data is split between the different bins. 

You can easily define the binwidth you want to use, by specifying the `binwidth`
argument inside of `geom_histogram()`, like so: `geom_histogram(binwidth = 15)`

**Question 3** 
**(a) Make two other histograms, one with a `binwidth` of 15 and one with a `binwidth` of 150.**

```{r binwidth}
#| layout-nrow: 1
# Your code for question 3 goes here! 


```

**(b) How do these three histograms compare? Are features revealed in one that are obscured in another?**


## SFO Dstinations 

If you want to visualize only on delays of flights headed to Los Angeles, you
need to first `filter()` the data for flights with that destination 
(`filter(dest == "LAX")`) and then make a histogram of the departure delays of
only those flights.

**Logical operators:** Filtering for certain observations (e.g. flights from a 
particular airport) is often of interest in data frames where we might want to 
examine observations with certain characteristics separately from the rest of
the data. To do so, you can use the `filter()` function and a series of
**logical operators**. The most commonly used logical operators for data
analysis are as follows:

-   `==` means "equal to"
-   `!=` means "not equal to"
-   `>` or `<` means "greater than" or "less than"
-   `>=` or `<=` means "greater than or equal to" or "less than or equal to"

**Question 4** -- Fill in the code to create a new dataframe named `sfo_flights`
that is the result of `filter()`ing only the observations whose destination was 
San Francisco.

```{r sfo}
# Your code for question 4 goes here! 

sfo_flights <- filter(nycflights, 
                      dest == "SFO")
```

### Multiple Data Filters 

You can also filter based on multiple criteria. You can separate these criteria 
using commas in the `filter()` function. Suppose you are interested in flights
leaving from LaGuardia (LGA) in February:

```{r lga-feb}
filter(nycflights, 
       origin == "LGA", 
       month == 2)
```

Note that you can separate the conditions using commas if you want flights that
are both leaving from LGA **and** flights in February. If you are interested in
either flights leaving from LGA **or** flights that happened in February, you
can use the `|` instead of the comma.

**Question 5** -- Fill in the code below to find the number of flights flying 
into SFO in July that arrived early. What does the result tell you?

```{r}
#| eval: false
## Code for exercise 5 here! 

filter(sfo_flights, 
       month == __, 
       arr_delay > __) |> 
  dim()
```

## Data Summaries 

You can also obtain numerical summaries for the flights headed to SFO, using
the `summarise()` function:

```{r summary-stats}
summarise(sfo_flights, 
          mean_dd   = mean(dep_delay), 
          median_dd = median(dep_delay), 
          n         = n())
```

Note that in the `summarise()` function I've created a list of three different
numerical summaries that we're interested in. 

The names of these elements are user defined, like `mean_dd`, `median_dd`, `n`,
and you can customize these names as you like (just don't use spaces in your
names). 

Calculating these summary statistics also requires that you know the summary
functions you would like to use. 

**Summary statistics:** Some useful function calls for summary statistics for a
single numerical variable are as follows:

-   `mean()`: calculates the average
-   `median()`: calculates the median
-   `sd()`: calculates the standard deviation
-   `var()`: calculates the variances
-   `IQR()`: calculates the inner quartile range (Q3 - Q1)
-   `min()`: finds the minimum 
-   `max()`: finds the maximum
-   `n()`: reports the sample size

Note that each of these functions takes a single variable as an argument and
returns a single value.

## Summaries vs. Visualizations 

_Which month would you expect to have the highest average delay departing from an NYC airport?_

Let's think about how you could answer this question. One option is to summarize
the data and inspect the output. Another option is to plot the delays and
inspect the plots. Let's try both! 

**Question 6** -- Calculate the following statistics for the arrival delays in
the `sfo_flights` dataset:
  - mean
  - median
  - max
  - min

```{r arr-delay-stats}
## Code for exercise 6 goes here! 


```

**Question 7** -- Now, rather than calculating summary statistics, plot the distribution of arrival delays for the `sfo_flights` dataset. Choose the type of
plot you believe is appropriate for visualizing the **distribution** of
departure delays. 

```{r arr-delay-plot}
## Code for exercise 7 goes here! 


```

**Question 8** -- What information can you obtain from the visualization that
you could not from the data summaries?

