---
title: "Two-Way ANOVA Models"
format: 
  revealjs:
    self-contained: true
editor: visual
---

```{r set-up}
#| include: false
library(tidyverse)
library(openintro)
library(moderndive)
library(infer)
library(ggridges)
library(broom)
library(emo)
library(gt)

movies <- movies_sample %>% 
  mutate(era = case_when(year < 1920 ~ "1910s", 
                         year >= 1920 & year < 1930 ~ "1920s", 
                         year >= 1930 & year < 1940 ~ "1930s", 
                         year >= 1940 & year < 1950 ~ "1940s", 
                         year >= 1950 & year < 1960 ~ "1950s", 
                         year >= 1960 & year < 1970 ~ "1960s", 
                         year >= 1970 & year < 1980 ~ "1970s", 
                         year >= 1980 & year < 1990 ~ "1980s", 
                         year >= 1990 & year < 2000 ~ "1990s", 
                         year >= 2000 ~ "2000s")) %>% 
  filter(era %in% c("1970s", "1980s", "1990s", "2000s"))
```

::: {style="font-size: 3em; color: #000000;"}
Two-way ANOVA
:::

</br>

::: {style="font-size: 2em; color: #0F4C81;"}
Goal:
:::

Assess if the relationship between one categorical explanatory variable and the response [differs]{style="color: #0F4C81"} based on the values of another categorical variable

------------------------------------------------------------------------

::: {style="font-size: 3em; color: #000000;"}
Modeling Options
:::

::: columns
::: {.column width="40%"}
::: {style="font-size: 2em; color: #ed8402;"}
Additive Model
:::
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
::: {style="font-size: 2em; color: #0F4C81;"}
Interaction Model
:::
:::
:::

------------------------------------------------------------------------

::: {style="font-size: 2em; color: #000000;"}
**What are we looking for?**
:::

```{r twa-plot}
#| echo: false
#| fig-align: center

movies %>% 
  ggplot(aes(y = era, x = rating, fill = genre)) + 
  geom_density_ridges(alpha = 0.5, scale = 1) +
  labs(y = "Era", 
       x = "IMDB Rating", 
       fill = "Genre") + 
  theme(axis.title = element_text(size = 18), 
        axis.text = element_text(size = 16), 
        legend.text = element_text(size = 16),
        legend.title = element_text(size = 18))
```

## 

::: {style="font-size: 3em; color: #000000;"}
Hypothesis Test Steps
:::

::: columns
::: {.column width="40%"}
::: {style="font-size: 1.5em; color: #0F4C81;"}
Step 1: Fit an interaction model
:::
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
::: {style="font-size: 1.5em; color: #687244;"}
Step 2: Decide if the interaction is necessary
:::

-   If yes, then this is your model!
-   If no, go to step 3.
:::
:::

## 

```{r}
#| echo: true
#| eval: false
aov(rating ~ era * genre, data = movies) %>% 
  tidy()
```

::: {style="font-size: 1.5em; color: #000000;"}
Why did I use a `*` when fitting the model?
:::

. . .

```{r}
#| echo: false
aov(rating ~ era*genre, data = movies) %>% 
  tidy() %>% 
  gt() 
```

<center>

::: {style="font-size: 1.5em; color: #0F4C81;"}
**What would you decide?**
:::

</center>

## 

::: columns
::: {.column width="40%"}
::: {style="font-size: 2em; color: #ed8402;"}
Step 3: Fit an additive model
:::
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
::: {style="font-size: 2em; color: #687244;"}
Step 4: Decide if each explanatory variable is necessary
:::
:::
:::

## 

```{r}
#| echo: true
#| eval: false
aov(rating ~ era + genre, data = movies) %>% 
  tidy()
```

. . .

```{r}
aov(rating ~ era + genre, data = movies) %>% 
  tidy() %>% 
  gt() 
```

::: {style="font-size: 2em; color: #0F4C81;"}
**What would you decide?**
:::

## 

::: {style="font-size: 2em; color: #c54405;"}
Step 5: Remove the variable with the largest p-value
:::

```{r}
#| echo: true
#| eval: false
aov(rating ~ genre, data = movies) %>% 
  tidy()
```

. . .

```{r}
aov(rating ~ genre, data = movies) %>% 
  tidy() %>% 
  gt() 
```

::: {style="font-size: 2em; color: #0F4C81;"}
**What would you decide?**
:::

## 

::: {style="font-size: 2em; color: #9a8e8d;"}
Step 6: Fit a mean-only model
:::

```{r}
#| echo: true

summarize(movies,
          mean_rating = mean(rating)
          )
```
